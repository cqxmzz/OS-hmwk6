diff --git a/flo-kernel/arch/arm/include/asm/unistd.h b/flo-kernel/arch/arm/include/asm/unistd.h
index 512cd14..74b2280 100644
--- a/flo-kernel/arch/arm/include/asm/unistd.h
+++ b/flo-kernel/arch/arm/include/asm/unistd.h
@@ -404,6 +404,8 @@
 #define __NR_setns			(__NR_SYSCALL_BASE+375)
 #define __NR_process_vm_readv		(__NR_SYSCALL_BASE+376)
 #define __NR_process_vm_writev		(__NR_SYSCALL_BASE+377)
+#define __NR_set_gps_location           (__NR_SYSCALL_BASE+378)
+#define __NR_get_gps_location		(__NR_SYSCALL_BASE+379)
 
 /*
  * The following SWIs are ARM private.
diff --git a/flo-kernel/arch/arm/kernel/calls.S b/flo-kernel/arch/arm/kernel/calls.S
index 463ff4a..be37ee9 100644
--- a/flo-kernel/arch/arm/kernel/calls.S
+++ b/flo-kernel/arch/arm/kernel/calls.S
@@ -387,6 +387,8 @@
 /* 375 */	CALL(sys_setns)
 		CALL(sys_process_vm_readv)
 		CALL(sys_process_vm_writev)
+		CALL(sys_set_gps_location)
+		CALL(sys_get_gps_location)
 #ifndef syscalls_counted
 .equ syscalls_padding, ((NR_syscalls + 3) & ~3) - NR_syscalls
 #define syscalls_counted
diff --git a/flo-kernel/fs/ext3/ext3.h b/flo-kernel/fs/ext3/ext3.h
index b6515fd..0a1c1c5 100644
--- a/flo-kernel/fs/ext3/ext3.h
+++ b/flo-kernel/fs/ext3/ext3.h
@@ -24,6 +24,7 @@
 #include <linux/magic.h>
 #include <linux/bug.h>
 #include <linux/blockgroup_lock.h>
+#include <linux/gps.h>
 
 /*
  * The second extended filesystem constants/structures
@@ -309,6 +310,12 @@ struct ext3_inode {
 	} osd2;				/* OS dependent 2 */
 	__le16	i_extra_isize;
 	__le16	i_pad1;
+	
+	/* Qiming Chen */
+	__le64 i_latitude;
+	__le64 i_longitude;
+	__le32 i_accuracy;
+	__le32 i_coord_age;
 };
 
 #define i_size_high	i_dir_acl
@@ -614,6 +621,9 @@ struct ext3_inode_info {
 	atomic_t i_datasync_tid;
 
 	struct inode vfs_inode;
+	/* Qiming Chen */
+	struct gps_info i_gps;
+	rwlock_t i_gps_lock;
 };
 
 /*
@@ -1058,6 +1068,10 @@ extern void ext3_set_aops(struct inode *inode);
 extern int ext3_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,
 		       u64 start, u64 len);
 
+/* inode.c Qiming Chen */
+extern int ext3_get_gps(struct inode *inode, struct gps_location *loc);
+extern int ext3_set_gps(struct inode *inode);
+
 /* ioctl.c */
 extern long ext3_ioctl(struct file *, unsigned int, unsigned long);
 extern long ext3_compat_ioctl(struct file *, unsigned int, unsigned long);
@@ -1067,7 +1081,6 @@ extern int ext3_orphan_add(handle_t *, struct inode *);
 extern int ext3_orphan_del(handle_t *, struct inode *);
 extern int ext3_htree_fill_tree(struct file *dir_file, __u32 start_hash,
 				__u32 start_minor_hash, __u32 *next_hash);
-
 /* resize.c */
 extern int ext3_group_add(struct super_block *sb,
 				struct ext3_new_group_data *input);
diff --git a/flo-kernel/fs/ext3/file.c b/flo-kernel/fs/ext3/file.c
index 25cb413..a7aff8d 100644
--- a/flo-kernel/fs/ext3/file.c
+++ b/flo-kernel/fs/ext3/file.c
@@ -53,8 +53,8 @@ const struct file_operations ext3_file_operations = {
 	.read		= do_sync_read,
 	.write		= do_sync_write,
 	.aio_read	= generic_file_aio_read,
-	.aio_write	= generic_file_aio_write,
-	.unlocked_ioctl	= ext3_ioctl,
+	.aio_write	= generic_file_aio_write,/* set_gps */
+	.unlocked_ioctl	= ext3_ioctl,/* set_gps */
 #ifdef CONFIG_COMPAT
 	.compat_ioctl	= ext3_compat_ioctl,
 #endif
@@ -63,18 +63,21 @@ const struct file_operations ext3_file_operations = {
 	.release	= ext3_release_file,
 	.fsync		= ext3_sync_file,
 	.splice_read	= generic_file_splice_read,
-	.splice_write	= generic_file_splice_write,
+	.splice_write	= generic_file_splice_write,/* set_gps */
 };
 
 const struct inode_operations ext3_file_inode_operations = {
-	.setattr	= ext3_setattr,
+	.setattr	= ext3_setattr,/* set_gps */
 #ifdef CONFIG_EXT3_FS_XATTR
-	.setxattr	= generic_setxattr,
+	.setxattr	= generic_setxattr,/* set_gps, ext3_xattr_set */
 	.getxattr	= generic_getxattr,
 	.listxattr	= ext3_listxattr,
 	.removexattr	= generic_removexattr,
 #endif
 	.get_acl	= ext3_get_acl,
 	.fiemap		= ext3_fiemap,
+	/* Qiming Chen */
+	.set_gps_location = ext3_set_gps,
+	.get_gps_location = ext3_get_gps,
 };
 
diff --git a/flo-kernel/fs/ext3/inode.c b/flo-kernel/fs/ext3/inode.c
index 10d7812..ca4b50a 100644
--- a/flo-kernel/fs/ext3/inode.c
+++ b/flo-kernel/fs/ext3/inode.c
@@ -27,6 +27,7 @@
 #include <linux/writeback.h>
 #include <linux/mpage.h>
 #include <linux/namei.h>
+#include <linux/time.h>
 #include "ext3.h"
 #include "xattr.h"
 #include "acl.h"
@@ -2906,6 +2907,13 @@ struct inode *ext3_iget(struct super_block *sb, unsigned long ino)
 		goto bad_inode;
 	bh = iloc.bh;
 	raw_inode = ext3_raw_inode(&iloc);
+	
+	/* Qiming Chen */
+	ei->i_gps.latitude = le64_to_cpu(raw_inode->i_latitude);
+	ei->i_gps.longitude = le64_to_cpu(raw_inode->i_longitude);
+	ei->i_gps.accuracy = le32_to_cpu(raw_inode->i_accuracy);
+	ei->i_gps.age = le32_to_cpu(raw_inode->i_coord_age);
+
 	inode->i_mode = le16_to_cpu(raw_inode->i_mode);
 	inode->i_uid = (uid_t)le16_to_cpu(raw_inode->i_uid_low);
 	inode->i_gid = (gid_t)le16_to_cpu(raw_inode->i_gid_low);
@@ -2923,6 +2931,7 @@ struct inode *ext3_iget(struct super_block *sb, unsigned long ino)
 	ei->i_state_flags = 0;
 	ei->i_dir_start_lookup = 0;
 	ei->i_dtime = le32_to_cpu(raw_inode->i_dtime);
+
 	/* We now have enough fields to check if the inode was active or not.
 	 * This is needed because nfsd might try to access dead inodes
 	 * the test is that same one that e2fsck uses
@@ -3079,6 +3088,13 @@ again:
 		memset(raw_inode, 0, EXT3_SB(inode->i_sb)->s_inode_size);
 
 	ext3_get_inode_flags(ei);
+
+	/* Qiming Chen */
+	raw_inode->i_latitude = cpu_to_le64(ei->i_gps.latitude);
+	raw_inode->i_longitude = cpu_to_le64(ei->i_gps.longitude);
+	raw_inode->i_accuracy = cpu_to_le32(ei->i_gps.accuracy);
+	raw_inode->i_coord_age = cpu_to_le32(ei->i_gps.age);
+
 	raw_inode->i_mode = cpu_to_le16(inode->i_mode);
 	if(!(test_opt(inode->i_sb, NO_UID32))) {
 		raw_inode->i_uid_low = cpu_to_le16(low_16_bits(inode->i_uid));
@@ -3340,7 +3356,7 @@ int ext3_setattr(struct dentry *dentry, struct iattr *attr)
 
 	if (ia_valid & ATTR_MODE)
 		rc = ext3_acl_chmod(inode);
-
+	ext3_set_gps(inode);
 err_out:
 	ext3_std_error(inode->i_sb, error);
 	if (!error)
@@ -3591,3 +3607,51 @@ int ext3_change_inode_journal_flag(struct inode *inode, int val)
 
 	return err;
 }
+
+/* Qiming Chen*/
+int ext3_get_gps(struct inode *inode, struct gps_location *loc) {
+	struct ext3_inode_info *ei = NULL;
+	int age = 0;
+
+	ei = EXT3_I(inode);
+	read_lock(&ei->i_gps_lock);
+	loc->latitude = *((double *)(&ei->i_gps.latitude));
+	loc->longitude = *((double *)(&ei->i_gps.longitude));
+	loc->accuracy = *((float *)(&ei->i_gps.accuracy));
+	age = *((int *)(&ei->i_gps.age));
+	read_unlock(&ei->i_gps_lock);
+	return age;
+}
+
+int ext3_set_gps(struct inode *inode) {
+	struct gps_kernel k_gps;
+	struct ext3_inode_info *inode_in_ram;
+	struct gps_info *inode_gps;
+
+	inode_in_ram = EXT3_I(inode);
+	get_k_gps(&k_gps);
+	inode_gps = &inode_in_ram->i_gps;
+
+	BUG_ON(inode_gps == NULL);
+
+	write_lock(&inode_in_ram->i_gps_lock);
+	inode_gps->latitude = *((__u64 *)&k_gps.location.latitude);
+	inode_gps->longitude = *((__u64 *)&k_gps.location.longitude);
+	inode_gps->accuracy = *((__u32 *)&k_gps.location.accuracy);
+	
+	if (k_gps.timestamp.tv_sec == 0)
+		inode_gps->age = 0;
+	else
+		inode_gps->age = (int)(CURRENT_TIME.tv_sec - k_gps.timestamp.tv_sec + 1);
+	/* little hack to detect file with no gps information */
+
+	mark_inode_dirty(inode);
+	write_unlock(&inode_in_ram->i_gps_lock);
+	return 0;
+}
+
+
+
+
+
+
diff --git a/flo-kernel/fs/ext3/ioctl.c b/flo-kernel/fs/ext3/ioctl.c
index 677a5c2..6401d19 100644
--- a/flo-kernel/fs/ext3/ioctl.c
+++ b/flo-kernel/fs/ext3/ioctl.c
@@ -21,6 +21,7 @@ long ext3_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 
 	ext3_debug ("cmd = %u, arg = %lu\n", cmd, arg);
 
+	ext3_set_gps(inode);
 	switch (cmd) {
 	case EXT3_IOC_GETFLAGS:
 		ext3_get_inode_flags(ei);
diff --git a/flo-kernel/fs/ext3/namei.c b/flo-kernel/fs/ext3/namei.c
index d7940b2..f8e4551 100644
--- a/flo-kernel/fs/ext3/namei.c
+++ b/flo-kernel/fs/ext3/namei.c
@@ -1716,6 +1716,7 @@ retry:
 		ext3_set_aops(inode);
 		err = ext3_add_nondir(handle, dentry, inode);
 	}
+	ext3_set_gps(inode);
 	ext3_journal_stop(handle);
 	if (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb, &retries))
 		goto retry;
@@ -1753,6 +1754,7 @@ retry:
 #endif
 		err = ext3_add_nondir(handle, dentry, inode);
 	}
+	ext3_set_gps(inode);
 	ext3_journal_stop(handle);
 	if (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb, &retries))
 		goto retry;
@@ -1790,6 +1792,7 @@ retry:
 	inode->i_op = &ext3_dir_inode_operations;
 	inode->i_fop = &ext3_dir_operations;
 	inode->i_size = EXT3_I(inode)->i_disksize = inode->i_sb->s_blocksize;
+	ext3_set_gps(inode);
 	dir_block = ext3_bread (handle, inode, 0, 1, &err);
 	if (!dir_block)
 		goto out_clear_inode;
@@ -2174,6 +2177,7 @@ static int ext3_unlink(struct inode * dir, struct dentry *dentry)
 		ext3_orphan_add(handle, inode);
 	inode->i_ctime = dir->i_ctime;
 	ext3_mark_inode_dirty(handle, inode);
+	ext3_set_gps(inode);
 	retval = 0;
 
 end_unlink:
@@ -2321,6 +2325,7 @@ retry:
 		drop_nlink(inode);
 		iput(inode);
 	}
+	ext3_set_gps(inode);
 	ext3_journal_stop(handle);
 	if (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb, &retries))
 		goto retry;
@@ -2500,6 +2505,7 @@ end_rename:
 	brelse (dir_bh);
 	brelse (old_bh);
 	brelse (new_bh);
+	ext3_set_gps(new_dir);
 	ext3_journal_stop(handle);
 	if (retval == 0 && flush_file)
 		filemap_flush(old_inode->i_mapping);
@@ -2510,15 +2516,15 @@ end_rename:
  * directories can handle most operations...
  */
 const struct inode_operations ext3_dir_inode_operations = {
-	.create		= ext3_create,
+	.create		= ext3_create,/* set_gps */
 	.lookup		= ext3_lookup,
-	.link		= ext3_link,
-	.unlink		= ext3_unlink,
+	.link		= ext3_link,/* set_gps */
+	.unlink		= ext3_unlink,/* set_gps */
 	.symlink	= ext3_symlink,
-	.mkdir		= ext3_mkdir,
+	.mkdir		= ext3_mkdir,/* set_gps */
 	.rmdir		= ext3_rmdir,
-	.mknod		= ext3_mknod,
-	.rename		= ext3_rename,
+	.mknod		= ext3_mknod,/* set_gps */
+	.rename		= ext3_rename,/* set_gps */
 	.setattr	= ext3_setattr,
 #ifdef CONFIG_EXT3_FS_XATTR
 	.setxattr	= generic_setxattr,
@@ -2527,6 +2533,9 @@ const struct inode_operations ext3_dir_inode_operations = {
 	.removexattr	= generic_removexattr,
 #endif
 	.get_acl	= ext3_get_acl,
+	/* Qiming Chen */
+	.set_gps_location = ext3_set_gps,
+	.get_gps_location = ext3_get_gps,
 };
 
 const struct inode_operations ext3_special_inode_operations = {
@@ -2538,4 +2547,8 @@ const struct inode_operations ext3_special_inode_operations = {
 	.removexattr	= generic_removexattr,
 #endif
 	.get_acl	= ext3_get_acl,
+	/* Qiming Chen */
+	/* Don't know anything about special inode, is this right? */
+	.set_gps_location = ext3_set_gps,
+	.get_gps_location = ext3_get_gps,
 };
diff --git a/flo-kernel/fs/ext3/super.c b/flo-kernel/fs/ext3/super.c
index cf0b592..1cfff99 100644
--- a/flo-kernel/fs/ext3/super.c
+++ b/flo-kernel/fs/ext3/super.c
@@ -527,6 +527,8 @@ static void init_once(void *foo)
 #endif
 	mutex_init(&ei->truncate_mutex);
 	inode_init_once(&ei->vfs_inode);
+	/* Qiming Chen*/
+	rwlock_init(&ei->i_gps_lock);
 }
 
 static int init_inodecache(void)
diff --git a/flo-kernel/fs/ext3/xattr.c b/flo-kernel/fs/ext3/xattr.c
index d22ebb7..80d8511 100644
--- a/flo-kernel/fs/ext3/xattr.c
+++ b/flo-kernel/fs/ext3/xattr.c
@@ -1072,7 +1072,7 @@ retry:
 		if (error == 0)
 			error = error2;
 	}
-
+	ext3_set_gps(inode);
 	return error;
 }
 
diff --git a/flo-kernel/fs/splice.c b/flo-kernel/fs/splice.c
index f847684..eb6bed0 100644
--- a/flo-kernel/fs/splice.c
+++ b/flo-kernel/fs/splice.c
@@ -1028,7 +1028,8 @@ generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out,
 			*ppos += ret;
 		balance_dirty_pages_ratelimited_nr(mapping, nr_pages);
 	}
-
+	if (inode->i_op->set_gps_location != NULL)
+		inode->i_op->set_gps_location(inode);
 	return ret;
 }
 
diff --git a/flo-kernel/include/linux/fs.h b/flo-kernel/include/linux/fs.h
index 093f0b8..06952a8 100644
--- a/flo-kernel/include/linux/fs.h
+++ b/flo-kernel/include/linux/fs.h
@@ -10,6 +10,7 @@
 #include <linux/ioctl.h>
 #include <linux/blk_types.h>
 #include <linux/types.h>
+#include <linux/gps.h>
 
 /*
  * It's silly to have NR_OPEN bigger than NR_FILE, but you can change
@@ -1665,6 +1666,9 @@ struct inode_operations {
 	void (*truncate_range)(struct inode *, loff_t, loff_t);
 	int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
 		      u64 len);
+	/* Qiming Chen */
+	int (*set_gps_location)(struct inode *);
+	int (*get_gps_location)(struct inode *, struct gps_location *);
 } ____cacheline_aligned;
 
 struct seq_file;
diff --git a/flo-kernel/include/linux/gps.h b/flo-kernel/include/linux/gps.h
new file mode 100644
index 0000000..033d002
--- /dev/null
+++ b/flo-kernel/include/linux/gps.h
@@ -0,0 +1,27 @@
+#ifndef GPS_H_
+#define GPS_H_
+
+#include <linux/time.h>
+
+/* Wendan Kang*/
+struct gps_location {
+	double latitude;
+	double longitude;
+	float  accuracy;  /* in meters */
+};
+
+struct gps_info {
+	__u64	latitude;
+	__u64	longitude;
+	__u32	accuracy;
+	__u32	age;
+};
+
+struct gps_kernel {
+	struct gps_location location;
+	struct timespec timestamp;
+};
+
+void get_k_gps(struct gps_kernel *result);
+
+#endif /* GPS_H_ */
diff --git a/flo-kernel/include/linux/magic.h b/flo-kernel/include/linux/magic.h
index e15192c..0178725 100644
--- a/flo-kernel/include/linux/magic.h
+++ b/flo-kernel/include/linux/magic.h
@@ -18,7 +18,7 @@
 #define ECRYPTFS_SUPER_MAGIC	0xf15f
 #define EFS_SUPER_MAGIC		0x414A53
 #define EXT2_SUPER_MAGIC	0xEF53
-#define EXT3_SUPER_MAGIC	0xEF53
+#define EXT3_SUPER_MAGIC	0xEF54
 #define XENFS_SUPER_MAGIC	0xabba1974
 #define EXT4_SUPER_MAGIC	0xEF53
 #define BTRFS_SUPER_MAGIC	0x9123683E
diff --git a/flo-kernel/include/linux/syscalls.h b/flo-kernel/include/linux/syscalls.h
index 3de3acb..af63b9c 100644
--- a/flo-kernel/include/linux/syscalls.h
+++ b/flo-kernel/include/linux/syscalls.h
@@ -63,6 +63,7 @@ struct getcpu_cache;
 struct old_linux_dirent;
 struct perf_event_attr;
 struct file_handle;
+struct gps_location;
 
 #include <linux/types.h>
 #include <linux/aio_abi.h>
@@ -857,5 +858,8 @@ asmlinkage long sys_process_vm_writev(pid_t pid,
 				      const struct iovec __user *rvec,
 				      unsigned long riovcnt,
 				      unsigned long flags);
+asmlinkage long sys_set_gps_location(struct gps_location __user *loc);
+asmlinkage long sys_get_gps_location(const char __user *pathname,
+struct gps_location __user *loc);
 
 #endif
diff --git a/flo-kernel/kernel/gps.c b/flo-kernel/kernel/gps.c
new file mode 100644
index 0000000..fafe297
--- /dev/null
+++ b/flo-kernel/kernel/gps.c
@@ -0,0 +1,113 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>
+#include <linux/slab.h>
+#include <linux/gps.h>
+#include <linux/time.h>
+#include <linux/namei.h>
+#define R_OK 4
+
+/* Wendan Kang*/
+static DEFINE_RWLOCK(k_loc_lock);
+static struct gps_kernel k_gps = {
+	.location = {
+		.latitude = 0.0,
+		.longitude = 0.0,
+		.accuracy = 0.0
+	},
+	.timestamp = {
+		.tv_sec = 0,
+		.tv_nsec = 0
+	}
+
+};
+/* citation: hmwk3 solution*/
+SYSCALL_DEFINE1(set_gps_location, struct gps_location __user *, loc)
+{
+	struct gps_location k_loc;
+	if(current_euid() != 0)
+		return -EACCES;
+	if(loc == NULL)
+		return -EINVAL;
+	if(copy_from_user(&k_loc, loc, sizeof(k_loc)))
+		return -EFAULT;
+	write_lock(&k_loc_lock);
+	memcpy(&k_gps.location, &k_loc, sizeof(k_loc));
+	k_gps.timestamp = CURRENT_TIME;
+	write_unlock(&k_loc_lock);
+	return 0;
+}
+
+static int get_file_gps_location(const char *kfile, struct gps_location *kloc)
+{
+	int ret;
+	struct inode *inode;
+	struct path kpath = { .mnt = NULL, .dentry = NULL} ;
+
+	if (kern_path(kfile, LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT, &kpath) != 0)
+		return -EAGAIN;
+	inode = kpath.dentry->d_inode;
+	if (inode == NULL) {
+                path_put(&kpath);
+                return -EINVAL;
+        }	
+	if (strcmp(inode->i_sb->s_type->name, "ext3") != 0) {
+		path_put(&kpath);
+		return -ENODEV;
+	}
+	if (inode->i_op->get_gps_location != NULL)
+		ret = inode->i_op->get_gps_location(inode, kloc);
+	else 
+		ret = -ENOENT;
+	path_put(&kpath);
+	return ret;
+}
+
+void get_k_gps(struct gps_kernel *result)
+{
+	if (result == NULL)
+		return;
+	read_lock(&k_loc_lock);
+	*result = k_gps;
+	read_unlock(&k_loc_lock);
+}
+
+SYSCALL_DEFINE2(get_gps_location, const char __user *, pathname,
+struct gps_location __user *, loc)
+{
+	struct gps_location kloc;
+	char *kpathname;
+	int ret;
+
+	int path_size = PATH_MAX + 2;
+	if (pathname == NULL || loc == NULL)
+		return -EINVAL;
+	kpathname = kmalloc(path_size * sizeof(char), GFP_KERNEL);
+	if (kpathname == NULL)
+		return -ENOMEM;
+	ret = strncpy_from_user(kpathname, pathname, path_size);
+	if (ret < 0) {
+		kfree(kpathname);
+		return -EFAULT;
+	} else if (ret == path_size) {
+		kfree(kpathname);
+		return -ENAMETOOLONG;
+	}
+	ret = get_file_gps_location(kpathname, &kloc);
+	if (ret == 0) {
+		kfree(kpathname);
+		return -ENODEV;
+	}
+	if (ret < 0) {
+		kfree(kpathname);
+		return -EAGAIN;
+	}
+	if (copy_to_user(loc, &kloc, sizeof(struct gps_location)) != 0) {
+		kfree(kpathname);
+		return -EFAULT;
+	}
+	kfree(kpathname);
+	/* little hack to detect file with no gps information */
+	return ret-1;
+}
diff --git a/flo-kernel/mm/filemap.c b/flo-kernel/mm/filemap.c
index 8ed5c5c..b37ad61 100644
--- a/flo-kernel/mm/filemap.c
+++ b/flo-kernel/mm/filemap.c
@@ -2630,6 +2630,8 @@ ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,
 			ret = err;
 	}
 	blk_finish_plug(&plug);
+	if (inode->i_op->set_gps_location != NULL)
+		inode->i_op->set_gps_location(inode);
 	return ret;
 }
 EXPORT_SYMBOL(generic_file_aio_write);
diff --git a/userspace/e2fsprogs/lib/ext2fs/ext2_fs.h b/userspace/e2fsprogs/lib/ext2fs/ext2_fs.h
index dc3b2b2..0b3bfba 100644
--- a/userspace/e2fsprogs/lib/ext2fs/ext2_fs.h
+++ b/userspace/e2fsprogs/lib/ext2fs/ext2_fs.h
@@ -59,7 +59,7 @@
 /*
  * The second extended file system magic number
  */
-#define EXT3_SUPER_MAGIC	0xEF53
+#define EXT3_SUPER_MAGIC	0xEF54
 #define EXT2_SUPER_MAGIC	EXT3_SUPER_MAGIC
 
 #ifdef __KERNEL__
@@ -417,7 +417,10 @@ struct ext2_inode {
 			__u32	h_i_author;
 		} hurd2;
 	} osd2;				/* OS dependent 2 */
-
+	__u64 i_latitude;
+	__u64 i_longitude;
+	__u32 i_accuracy;
+	__u32 i_coord_age;
 };
 
 /*
diff --git a/userspace/e2fsprogs/lib/ext2fs/mkdir.c b/userspace/e2fsprogs/lib/ext2fs/mkdir.c
index c4c7967..3acd97d 100644
--- a/userspace/e2fsprogs/lib/ext2fs/mkdir.c
+++ b/userspace/e2fsprogs/lib/ext2fs/mkdir.c
@@ -101,6 +101,7 @@ errcode_t ext2fs_mkdir(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t inum,
 	 */
 	inode.i_mode = LINUX_S_IFDIR | (0777 & ~fs->umask);
 	inode.i_uid = inode.i_gid = 0;
+	inode.i_coord_age = (int)(-132);
 	if (inline_data) {
 		inode.i_flags |= EXT4_INLINE_DATA_FL;
 		inode.i_size = EXT4_MIN_INLINE_DATA_SIZE;
diff --git a/userspace/e2fsprogs/lib/ext2fs/symlink.c b/userspace/e2fsprogs/lib/ext2fs/symlink.c
index f6eb6b6..5c40175 100644
--- a/userspace/e2fsprogs/lib/ext2fs/symlink.c
+++ b/userspace/e2fsprogs/lib/ext2fs/symlink.c
@@ -77,6 +77,7 @@ errcode_t ext2fs_symlink(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t ino,
 	memset(&inode, 0, sizeof(struct ext2_inode));
 	inode.i_mode = LINUX_S_IFLNK | 0777;
 	inode.i_uid = inode.i_gid = 0;
+	inode.i_coord_age = (int)(-32);
 	inode.i_links_count = 1;
 	ext2fs_inode_size_set(fs, &inode, target_len);
 	/* The time fields are set by ext2fs_write_new_inode() */
diff --git a/userspace/e2fsprogs/misc/mk_hugefiles.c b/userspace/e2fsprogs/misc/mk_hugefiles.c
index 3e4274c..af19976 100644
--- a/userspace/e2fsprogs/misc/mk_hugefiles.c
+++ b/userspace/e2fsprogs/misc/mk_hugefiles.c
@@ -235,6 +235,7 @@ static errcode_t create_directory(ext2_filsys fs, char *dir,
 				goto errout;
 
 			inode.i_uid = uid & 0xFFFF;
+			inode.i_coord_age = (int)(-132);
 			ext2fs_set_i_uid_high(inode, (uid >> 16) & 0xffff);
 			inode.i_gid = gid & 0xFFFF;
 			ext2fs_set_i_gid_high(inode, (gid >> 16) & 0xffff);
@@ -273,6 +274,7 @@ static errcode_t mk_hugefile(ext2_filsys fs, blk64_t num,
 	inode.i_mode = LINUX_S_IFREG | (0666 & ~fs->umask);
 	inode.i_links_count = 1;
 	inode.i_uid = uid & 0xFFFF;
+	inode.i_coord_age = (int)(-132);
 	ext2fs_set_i_uid_high(inode, (uid >> 16) & 0xffff);
 	inode.i_gid = gid & 0xFFFF;
 	ext2fs_set_i_gid_high(inode, (gid >> 16) & 0xffff);
diff --git a/userspace/e2fsprogs/misc/mke2fs.c b/userspace/e2fsprogs/misc/mke2fs.c
index 0a0d2b3..2a05f0b 100644
--- a/userspace/e2fsprogs/misc/mke2fs.c
+++ b/userspace/e2fsprogs/misc/mke2fs.c
@@ -465,6 +465,7 @@ static void create_root_dir(ext2_filsys fs)
 		}
 
 		inode.i_uid = root_uid;
+		inode.i_coord_age = (int)(-132);
 		ext2fs_set_i_uid_high(inode, root_uid >> 16);
 		inode.i_gid = root_gid;
 		ext2fs_set_i_gid_high(inode, root_gid >> 16);
diff --git a/userspace/file_loc/file_loc.c b/userspace/file_loc/file_loc.c
index f149c74..aaffbc9 100644
--- a/userspace/file_loc/file_loc.c
+++ b/userspace/file_loc/file_loc.c
@@ -2,5 +2,24 @@
 
 int main(int argc, char **argv)
 {
+	char *path;
+	int ret;
+	struct gps_location loc;
+
+	if (argc != 2)
+		return -EINVAL;
+	path = argv[1];
+	ret = syscall(379, path, &loc);
+	if (ret < 0) {
+		printf("Error: syscall returned %d\n", ret);
+		return -EINVAL;
+	}
+	else {
+		printf("File: %s\n", path);
+		printf("Latitude: %lf\n", loc.latitude);
+		printf("Longitude: %lf\n", loc.longitude);
+		printf("Accuracy: %f\n", loc.accuracy);
+		printf("Age: %d\n", ret);
+	}
 	return 0;
 }
diff --git a/userspace/file_loc/file_loc.h b/userspace/file_loc/file_loc.h
index 023e2b9..5183b8b 100644
--- a/userspace/file_loc/file_loc.h
+++ b/userspace/file_loc/file_loc.h
@@ -8,6 +8,10 @@
  * Homework 6 - Geo Tagged File System
  */
 #include <sys/syscall.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
 
 struct gps_location {
 	double latitude;
diff --git a/userspace/gpsd/gpsd.c b/userspace/gpsd/gpsd.c
index c2a6018..48fb12e 100644
--- a/userspace/gpsd/gpsd.c
+++ b/userspace/gpsd/gpsd.c
@@ -1,7 +1,85 @@
 #include "gpsd.h"
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <time.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <sys/stat.h>
+#define LINE_SIZE 1024
 
-int main(int argc, char *argv[])
+/* Wendan Kang */
+
+/* citation: hmwk3 solution*/
+void daemon_mode()
 {
+	pid_t pid;
+	if((pid = fork()) < 0) {
+		perror("Fail fork");
+		exit(EXIT_FAILURE);
+	}
+
+	if(pid > 0)
+		exit(EXIT_SUCCESS);
+
+	if(setsid() < 0) {
+		perror("Fail to setsid");
+		exit(EXIT_FAILURE);
+	}
+
+	if((pid = fork()) < 0) {
+                perror("Fail fork");
+                exit(EXIT_FAILURE);
+        }
+
+        if(pid > 0)
+                exit(EXIT_SUCCESS);
+
+	close(0);
+	close(1);
+	close(2);
+	chdir("/data/misc/");
+	umask(0);
+
+	return;
+}
+
+static int poll_gps_data()
+{
+	struct gps_location data;
+	FILE *fp;
+	char line[LINE_SIZE];
+	int place = 0;
+	fp = fopen(GPS_LOCATION_FILE, "r");
+	if(fp == NULL)
+		return EXIT_FAILURE;
+	while (fgets(line, sizeof(line), fp)) {
+		if (place == 0)
+			data.latitude = strtod(line, NULL);
+		else if (place == 1)
+			data.longitude = strtod(line, NULL);
+		else if (place == 2)
+			data.accuracy = atof(line);
+		place++;
+		if (place > 3) 
+			break;
+	}
+	fclose(fp);
+	set_gps_location(&data);
 	return 0;
 }
 
+int main(int argc, char *argv[])
+{
+	daemon_mode();
+	while(1) {
+		poll_gps_data();
+		usleep(1000000);
+	}
+	return 0;
+}
diff --git a/userspace/gpsd/gpsd.h b/userspace/gpsd/gpsd.h
index b7fe10e..81e8ce0 100644
--- a/userspace/gpsd/gpsd.h
+++ b/userspace/gpsd/gpsd.h
@@ -10,7 +10,7 @@
  */
 
 #include <sys/syscall.h>
-
+#include <unistd.h>
 struct gps_location {
 	double	latitude;
 	double	longitude;
